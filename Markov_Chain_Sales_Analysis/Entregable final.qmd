---
title: "Entregable 1 _ Reto"
author: "Rebeca Koch, Itzelt Gomez, Gabriela Lujan"
format: html
format:
   html:
     toc: true
     html-math-method: katex
     embed-resources: true
     self-contained-math: true
     df-print: kable
editor: visual
---

# Paquetes

```{r}
#install.packages("arrow")
# Install from CRAN
#install.packages("funModeling")
#install.packages("Hmisc")
#install.packages("tidyverse")
#install.packages("ggplot2")
#install.packages("lubridate")
#install.packages('dplyr')

```

```{r}
#install.packages("expm")

```

```{r}
library(expm)
library(ggplot2)
library(lubridate)
library(readr)
library(dplyr)
library(arrow)
library(tidyr)
library(tidyverse)
library(shiny)
```

# Lectura de datos

```{r lectura datos}
data = read_parquet("24o_medicom.parquet")
head(data)
```

```{r filtrado por fecha}
library(dplyr)

pisa = data %>% 
  filter(fecha >= as.Date("2020-12-01"))
```

```{r comprobar que ya esté filtrado}
min(pisa$fecha)

# Find the latest date
max(pisa$fecha)
```

```{r juntamos las ventas por mes de cada producto}
library(dplyr)

# Paso 1: Crear una nueva columna con el primer día del mes
pisa <- pisa %>%
  mutate(mes = as.Date(format(fecha, "%Y-%m-01")))

# Paso 2: Calcular las ventas mensuales por material_id
ventas <- pisa %>%
  group_by(mes, id_material) %>%
  summarise(ventas = sum(ventas, na.rm = TRUE)) %>%
  ungroup()

# Paso 3: Reemplazar las columnas 'ventas' y 'fecha' en el dataframe original
pisa <- pisa %>%
  select(-ventas, -fecha) %>%   # Eliminar las columnas originales
  left_join(ventas, by = c("mes", "id_material")) %>%
  distinct(mes, id_material, .keep_all = TRUE)  # Eliminar duplicados, si los hay

# Cambiar el nombre de la columna 'mes' a 'fecha' si deseas mantener ese nombre
pisa <- pisa %>%
  rename(fecha = mes)

# Mostrar el resultado
print(pisa)

```

```{r}
tail(pisa)
```

# Iniciamos proceso para A/D

## Tabla para id_material y fecha

```{r resultados de ventas}
sorted_data <- pisa %>% #contiene los resultados de las ventas #ordenadas de mayor a menor 
  select(id_material, fecha, ventas) %>%
  arrange(desc(ventas))
print(sorted_data)
```

# Tablas de transiciones para hacer las matrices

```{r comprobar valores nulos}
sum(is.na(pisa$fecha))

pisa$fecha <- as.Date(pisa$fecha)

```

```{r tabla de estados}
complete_activity <- pisa |>
  tidyr:: expand(id_material, fecha = seq(min(pisa$fecha), max(pisa$fecha), by = "month")) |>
  left_join(pisa, by = c("id_material", "fecha")) |>
  mutate(
    ventas = ifelse(is.na(ventas), 0, ventas)
  ) |>
  group_by(id_material) |>
  mutate(
    prev_ventas = lag(ventas),
    next_ventas = lead(ventas),
    status = case_when(
      ventas > 0 ~ "A", 
      ventas < 0 & (prev_ventas > 0 & next_ventas > 0) ~ "A",
      ventas < 0 & prev_ventas >= 0 & (next_ventas == 0 | next_ventas < 0) ~ "D",
      ventas < 0 & (prev_ventas == 0 | next_ventas == 0) ~ "D",
      TRUE ~ "D"
    )
  ) |>
  select(-c(prev_ventas, next_ventas, id_cliente)) |>
  ungroup()
```

```{r}
complete_activity
```

### Queremos calcular cuántos meses consecutivos un producto ha estado inactivo y encontrar aquellos productos que superan un umbral definido de inactividad.

```{r tablas de estados de transicion}
calculate_transitions <- function(pisa) {
  pisa |>
    arrange(fecha) |>  # Ensure data is sorted by month
    mutate(
 # convertimos los estados a numericos (1 =  "activo", 0 = " desactivo")
      status_numeric = as.numeric(status == "A"),
      # calcula los cambios de estado entre períodos !!?
      state_change = c(NA, diff(status_numeric))
    ) |>
    summarize(
      A_to_A = sum(state_change == 0 & lag(status_numeric) == 1 & status_numeric == 1, na.rm = TRUE),
      D_to_A = sum(state_change == 1 & lag(status_numeric) == 0 & status_numeric == 1, na.rm = TRUE),
      A_to_D = sum(state_change == -1 & lag(status_numeric) == 1 & status_numeric == 0, na.rm = TRUE),
      D_to_D = sum(state_change == 0 & lag(status_numeric) == 0 & status_numeric == 0, na.rm = TRUE)
    )
}

transition_tables <- complete_activity %>%
  group_by(id_material) %>%
#con el group by, calcula las transiciones por material 
  do(calculate_transitions(.)) %>%
#ya podemos aplicar la funcion para calcular las transiciones por cada material 
  ungroup()

print(transition_tables)

```

## Normalizamos las transiciones

```{r transiciones normalizadas}
transiciones_normalizadas <- function(pisa){
  pisa |>
    mutate(
#Calcula la suma total de transiciones desde estados activos e inactivos, respectivamente
      suma_A = A_to_A + A_to_D,
      suma_D = D_to_A + D_to_D,
      suma_A = ifelse(suma_A == 0,1, suma_A), #evita division por 0
      suma_D = ifelse(suma_D == 0,1, suma_D),
      A_to_A= A_to_A / suma_A,
      D_to_A = D_to_A / suma_D,
      A_to_D = A_to_D / suma_A,
      D_to_D = D_to_D / suma_D
    ) |>
    select(-c(suma_A, suma_D)) |>
    replace_na(list(A_to_A = 0, D_to_A = 0, A_to_D = 0, D_to_D = 0))
}

tablas_transicion_normalizadas <- transition_tables |>
  group_by(id_material) |>
  do(transiciones_normalizadas(.)) |>
  ungroup()

tablas_transicion_normalizadas
```

# Construcción de las matrices

### Función para crear una matriz de transicion para cada producto

```{r matriz de transicion para cada producto}
create_transition_matrix <- function(pisa){
  transition_matrix <- matrix(
    c(
      pisa$A_to_A, pisa$A_to_D,
      pisa$D_to_A, pisa$D_to_D
    ),
    nrow = 2,
    byrow = TRUE
  )
  colnames(transition_matrix) <- c("A", "D")
  rownames(transition_matrix) <- c("A", "D")
  return(transition_matrix)
}
```

### Lista de matrices para cada producto

```{r}
split_data <- split(tablas_transicion_normalizadas, tablas_transicion_normalizadas$id_material)
matrices <- lapply(split_data, create_transition_matrix)
```

visualizamos la matriz para el i producto

```{r visualizamos la matriz del producto i}
matrices[["584"]]
```

```{r gráfico distribución de probabilidad}


# Crear un data frame con las probabilidades de transición de todos los productos
probabilidades_df <- data.frame(
  P_A_D = sapply(matrices, function(m) m[1, 2]),
  P_D_A = sapply(matrices, function(m) m[2, 1]),
  P_A_A = sapply(matrices, function(m) m[1, 1]),
  P_D_D = sapply(matrices, function(m) m[2, 2])
)

# Visualizar la distribución de las probabilidades
ggplot(probabilidades_df, aes(x = P_A_D)) + 
  geom_histogram(binwidth = 0.1, fill = "#ffc0cb", color = "black") +
  labs(title = "Distribución de la probabilidad de transición de Activo a Desactivado",
       x = "Probabilidad (Activo a Desactivado)", y = "Frecuencia")

ggplot(probabilidades_df, aes(x = P_D_A)) + 
  geom_histogram(binwidth = 0.1, fill = "#ffc0cb", color = "black") +
  labs(title = "Distribución de la probabilidad de transición de Desactivado a Activo",
       x = "Probabilidad (Desactivado a Activo)", y = "Frecuencia")

ggplot(probabilidades_df, aes(x = P_A_A)) + 
  geom_histogram(binwidth = 0.1, fill = "#ffc0cb", color = "black") +
  labs(title = "Distribución de la probabilidad de transición de Activo a Activo",
       x = "Probabilidad (Activo a Activo)", y = "Frecuencia")

ggplot(probabilidades_df, aes(x = P_D_D)) + 
  geom_histogram(binwidth = 0.1, fill = "#ffc0cb", color = "black") +
  labs(title = "Distribución de la probabilidad de transición de Desactivado a Desactivo",
       x = "Probabilidad (Desactivado a Desactivo)", y = "Frecuencia")
```

-   matriz_n_pasos\[1,1\] te da la probabilidad de que un producto activo siga activo después de n pasos.
-   matriz_n_pasos\[1,2\] te da la probabilidad de que un producto activo esté inactivo después de n pasos.

```{r gráfico de proporción de actividad}
library(dplyr)
library(ggplot2)

# Filtrar datos posteriores a 2020
data_post2020 <- complete_activity %>%
  filter(fecha >= as.Date("2021-01-01"))

# Calcular proporciones por período (en este caso, por mes)
proportions <- data_post2020 %>%
  group_by(fecha, status) %>%
  summarise(count = n()) %>%
  mutate(proportion = count / sum(count))

# Graficar las proporciones
ggplot(proportions, aes(x = fecha, y = proportion, color = status)) +
  geom_line() +
  labs(title = "Proporción de productos activos e inactivos después de 2020",
       x = "Fecha",
       y = "Proporción")
```

# Cadenas Ergódicas

## Funcion para comprobar cuales son y no son

```{r cadenas ergódicas}
 identify_ergodic_matrices <- function(tablas_transicion_normalizadas) {
  # Inicializamos listas vacías para productos con matrices ergódicas y no ergódicas
  non_ergodic_products <- list()
  ergodic_products <- list()
  
  # Recorremos cada producto y su matriz de transición
  for (i in 1:nrow(tablas_transicion_normalizadas)) {
    # Extraemos los valores de transición de cada producto como matriz 2x2
    matrix_product <- matrix(as.numeric(tablas_transicion_normalizadas[i, c("A_to_A", "A_to_D", "D_to_A", "D_to_D")]), nrow = 2, byrow = TRUE)
    
    # Verificamos si hay probabilidades de transición igual a 0 en cualquier parte de la matriz
    zero_in_diagonal <- matrix_product[1,2] == 0 | matrix_product[2,1] == 0
    
    
    if (zero_in_diagonal) {
      # Si hay probabilidad de 0 en cualquier parte de la matriz, añadimos el producto a la lista de no ergódicos
      non_ergodic_products[[length(non_ergodic_products) + 1]] <- tablas_transicion_normalizadas$id_material[i]
    } else {
      # Si no hay probabilidad de 0 en ninguna parte de la matriz, añadimos el producto a la lista de ergódicos
      ergodic_products[[length(ergodic_products) + 1]] <- tablas_transicion_normalizadas$id_material[i]
    }
  }
  
  # Convertimos las listas a vectores para un manejo más fácil
  non_ergodic_products <- unlist(non_ergodic_products)
  ergodic_products <- unlist(ergodic_products)
  
  # Devolvemos las listas
  return(list(non_ergodic = non_ergodic_products, ergodic = ergodic_products))
}

# Ejecución de la función
result <- identify_ergodic_matrices(tablas_transicion_normalizadas)


print(length(result$non_ergodic))
print(length(result$ergodic))

# Imprimir resultados
cat("Productos con matrices no ergódicas:\n", paste(result$non_ergodic, collapse = ", "), "\n")
cat("Productos con matrices ergódicas:\n", paste(result$ergodic, collapse = ", "), "\n")
```

```{r}
print(matrices[["1000"]])
```

# Convergencia

## matriz de transicion a N pasos

```{r matriz transicion a n pasos y sus distribuciones}


# 1: creamos la función para calcular la matriz de transicion a n pasos y la distribucion 


calcular_n_pasos <- function(P, pi0, n_steps){
  #inicializamos la matriz para guardar aquí las distribuciones en cada paso
  Pi <- matrix(0, nrow = n_steps, ncol = length(pi0))
  
  #calculamos la distribución en el primer paso
  Pi[1, ] <- pi0 %*% P
  
  #iteramos para calcular las distribuciones
  for (i in 2:n_steps){
    Pi[i, ] <- Pi[i-1, ] %*% P
  }
  
  return(Pi)
}

#2: iteramos sobre todas las matrices

n_steps <- 24
pi0 <- c(0.3, 0.7)

results <- list()

for (i in seq_along(matrices)) {
  P <- matrices[[i]]
  
  #distribucion a n pasos para la matriz i 
  Pi <- calcular_n_pasos(P, pi0, n_steps)
  
  results[[names(matrices)[i]]] <- Pi
}


#accedemos a los resultados de cada distribución Xn 
results[["1000"]]



```

```{r visualizaciones distribuciones}
#matrix a visualizar
selected_matrix <- results[["1000"]]

#convertimos la matriz en un data frame para ggplot2
df <- as.data.frame(selected_matrix)
df$step <- 1:n_steps

ggplot(df, aes(x = factor(step), y = V1)) +
  geom_bar(stat = "identity", fill = "#4B6E82") +
  labs(title = "Distribución del estado activo para el producto 584 a través de los pasos",
       x = "Paso", y = "Probabilidad") +
  theme_minimal()
```

# INTERFAZ

```{r}
ui <- fluidPage(
  titlePanel("Visualización de Cadenas de Markov por Material"),
  sidebarLayout(
    sidebarPanel(
      textInput("id_material", "Ingrese el ID del Material:", value = ""),  # Valor predeterminado vacío
      actionButton("submit", "Verificar Cadena")
    ),
    mainPanel(
      h4("¿el producto alcanzará cierta estabilidad con el tiempo sin importar el estado inicial?:"),
      textOutput("ergodic_status"),
      h4("Matriz de transición:"),
      tableOutput("matrix_output"),
      plotOutput("transition_plot")
    )
  )
)



# Define server
server <- function(input, output) {
  # Cuando el usuario hace clic en "submit"
  observeEvent(input$submit, {
    # Extraer el id_material ingresado
    id_material <- input$id_material

    # Filtrar el material y calcular su matriz de transición
    matriz_material <- matrices[[id_material]]
    
    # Verificar si es ergódica
    is_ergodic <- id_material %in% result$ergodic

    # Mostrar si es ergódica o no
    output$ergodic_status <- renderText({
      if (is_ergodic) {
        "Sí"
      } else {
        "No"
      }
    })

    # Mostrar la matriz de transición
    output$matrix_output <- renderTable({
      matriz_material
    })

    # Calcular la distribución a n pasos y mostrar el gráfico
    output$transition_plot <- renderPlot({
      n_steps <- 24
      pi0 <- c(0.3, 0.7)
      
      # Llamar a la función de matriz de transición a n pasos
      Pi <- calcular_n_pasos(matriz_material, pi0, n_steps)
      
      # Convertir a data frame para ggplot2
      df <- as.data.frame(Pi)
      df$step <- 1:n_steps
      
      ggplot(df, aes(x = factor(step), y = V1)) +
        geom_bar(stat = "identity", fill = "#4B6E82") +
        labs(title = paste("Distribución del estado de ventas para el producto", id_material),
             x = "Paso", y = "Probabilidad") +
        theme_minimal()
    })
  })
}

# Run the app
shinyApp(ui = ui, server = server)
```
